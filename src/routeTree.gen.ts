/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SigninImport } from './routes/signin'
import { Route as DashboardRouteImport } from './routes/dashboard/route'
import { Route as publicRouteImport } from './routes/(public)/route'
import { Route as protectedRouteImport } from './routes/(protected)/route'
import { Route as IndexImport } from './routes/index'
import { Route as DashboardIndexImport } from './routes/dashboard/index'
import { Route as publicGuardianOfTheGalaxyImport } from './routes/(public)/guardian-of-the-galaxy'
import { Route as publicDiaryImport } from './routes/(public)/diary'
import { Route as publicAboutImport } from './routes/(public)/about'
import { Route as protectedAdminImport } from './routes/(protected)/admin'
import { Route as protectedAdminSocketIndexImport } from './routes/(protected)/admin-socket.index'
import { Route as publicDiaryIdIndexImport } from './routes/(public)/diary.$id.index'

// Create/Update Routes

const SigninRoute = SigninImport.update({
  id: '/signin',
  path: '/signin',
  getParentRoute: () => rootRoute,
} as any)

const DashboardRouteRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const publicRouteRoute = publicRouteImport.update({
  id: '/(public)',
  getParentRoute: () => rootRoute,
} as any)

const protectedRouteRoute = protectedRouteImport.update({
  id: '/(protected)',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DashboardIndexRoute = DashboardIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const publicGuardianOfTheGalaxyRoute = publicGuardianOfTheGalaxyImport.update({
  id: '/guardian-of-the-galaxy',
  path: '/guardian-of-the-galaxy',
  getParentRoute: () => publicRouteRoute,
} as any)

const publicDiaryRoute = publicDiaryImport.update({
  id: '/diary',
  path: '/diary',
  getParentRoute: () => publicRouteRoute,
} as any)

const publicAboutRoute = publicAboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => publicRouteRoute,
} as any)

const protectedAdminRoute = protectedAdminImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => protectedRouteRoute,
} as any)

const protectedAdminSocketIndexRoute = protectedAdminSocketIndexImport.update({
  id: '/admin-socket/',
  path: '/admin-socket/',
  getParentRoute: () => protectedRouteRoute,
} as any)

const publicDiaryIdIndexRoute = publicDiaryIdIndexImport.update({
  id: '/$id/',
  path: '/$id/',
  getParentRoute: () => publicDiaryRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/(protected)': {
      id: '/(protected)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof protectedRouteImport
      parentRoute: typeof rootRoute
    }
    '/(public)': {
      id: '/(public)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof publicRouteImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRoute
    }
    '/signin': {
      id: '/signin'
      path: '/signin'
      fullPath: '/signin'
      preLoaderRoute: typeof SigninImport
      parentRoute: typeof rootRoute
    }
    '/(protected)/admin': {
      id: '/(protected)/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof protectedAdminImport
      parentRoute: typeof protectedRouteImport
    }
    '/(public)/about': {
      id: '/(public)/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof publicAboutImport
      parentRoute: typeof publicRouteImport
    }
    '/(public)/diary': {
      id: '/(public)/diary'
      path: '/diary'
      fullPath: '/diary'
      preLoaderRoute: typeof publicDiaryImport
      parentRoute: typeof publicRouteImport
    }
    '/(public)/guardian-of-the-galaxy': {
      id: '/(public)/guardian-of-the-galaxy'
      path: '/guardian-of-the-galaxy'
      fullPath: '/guardian-of-the-galaxy'
      preLoaderRoute: typeof publicGuardianOfTheGalaxyImport
      parentRoute: typeof publicRouteImport
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardIndexImport
      parentRoute: typeof DashboardRouteImport
    }
    '/(protected)/admin-socket/': {
      id: '/(protected)/admin-socket/'
      path: '/admin-socket'
      fullPath: '/admin-socket'
      preLoaderRoute: typeof protectedAdminSocketIndexImport
      parentRoute: typeof protectedRouteImport
    }
    '/(public)/diary/$id/': {
      id: '/(public)/diary/$id/'
      path: '/$id'
      fullPath: '/diary/$id'
      preLoaderRoute: typeof publicDiaryIdIndexImport
      parentRoute: typeof publicDiaryImport
    }
  }
}

// Create and export the route tree

interface protectedRouteRouteChildren {
  protectedAdminRoute: typeof protectedAdminRoute
  protectedAdminSocketIndexRoute: typeof protectedAdminSocketIndexRoute
}

const protectedRouteRouteChildren: protectedRouteRouteChildren = {
  protectedAdminRoute: protectedAdminRoute,
  protectedAdminSocketIndexRoute: protectedAdminSocketIndexRoute,
}

const protectedRouteRouteWithChildren = protectedRouteRoute._addFileChildren(
  protectedRouteRouteChildren,
)

interface publicDiaryRouteChildren {
  publicDiaryIdIndexRoute: typeof publicDiaryIdIndexRoute
}

const publicDiaryRouteChildren: publicDiaryRouteChildren = {
  publicDiaryIdIndexRoute: publicDiaryIdIndexRoute,
}

const publicDiaryRouteWithChildren = publicDiaryRoute._addFileChildren(
  publicDiaryRouteChildren,
)

interface publicRouteRouteChildren {
  publicAboutRoute: typeof publicAboutRoute
  publicDiaryRoute: typeof publicDiaryRouteWithChildren
  publicGuardianOfTheGalaxyRoute: typeof publicGuardianOfTheGalaxyRoute
}

const publicRouteRouteChildren: publicRouteRouteChildren = {
  publicAboutRoute: publicAboutRoute,
  publicDiaryRoute: publicDiaryRouteWithChildren,
  publicGuardianOfTheGalaxyRoute: publicGuardianOfTheGalaxyRoute,
}

const publicRouteRouteWithChildren = publicRouteRoute._addFileChildren(
  publicRouteRouteChildren,
)

interface DashboardRouteRouteChildren {
  DashboardIndexRoute: typeof DashboardIndexRoute
}

const DashboardRouteRouteChildren: DashboardRouteRouteChildren = {
  DashboardIndexRoute: DashboardIndexRoute,
}

const DashboardRouteRouteWithChildren = DashboardRouteRoute._addFileChildren(
  DashboardRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof publicRouteRouteWithChildren
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/signin': typeof SigninRoute
  '/admin': typeof protectedAdminRoute
  '/about': typeof publicAboutRoute
  '/diary': typeof publicDiaryRouteWithChildren
  '/guardian-of-the-galaxy': typeof publicGuardianOfTheGalaxyRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/admin-socket': typeof protectedAdminSocketIndexRoute
  '/diary/$id': typeof publicDiaryIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof publicRouteRouteWithChildren
  '/signin': typeof SigninRoute
  '/admin': typeof protectedAdminRoute
  '/about': typeof publicAboutRoute
  '/diary': typeof publicDiaryRouteWithChildren
  '/guardian-of-the-galaxy': typeof publicGuardianOfTheGalaxyRoute
  '/dashboard': typeof DashboardIndexRoute
  '/admin-socket': typeof protectedAdminSocketIndexRoute
  '/diary/$id': typeof publicDiaryIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/(protected)': typeof protectedRouteRouteWithChildren
  '/(public)': typeof publicRouteRouteWithChildren
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/signin': typeof SigninRoute
  '/(protected)/admin': typeof protectedAdminRoute
  '/(public)/about': typeof publicAboutRoute
  '/(public)/diary': typeof publicDiaryRouteWithChildren
  '/(public)/guardian-of-the-galaxy': typeof publicGuardianOfTheGalaxyRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/(protected)/admin-socket/': typeof protectedAdminSocketIndexRoute
  '/(public)/diary/$id/': typeof publicDiaryIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/signin'
    | '/admin'
    | '/about'
    | '/diary'
    | '/guardian-of-the-galaxy'
    | '/dashboard/'
    | '/admin-socket'
    | '/diary/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/signin'
    | '/admin'
    | '/about'
    | '/diary'
    | '/guardian-of-the-galaxy'
    | '/dashboard'
    | '/admin-socket'
    | '/diary/$id'
  id:
    | '__root__'
    | '/'
    | '/(protected)'
    | '/(public)'
    | '/dashboard'
    | '/signin'
    | '/(protected)/admin'
    | '/(public)/about'
    | '/(public)/diary'
    | '/(public)/guardian-of-the-galaxy'
    | '/dashboard/'
    | '/(protected)/admin-socket/'
    | '/(public)/diary/$id/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  protectedRouteRoute: typeof protectedRouteRouteWithChildren
  publicRouteRoute: typeof publicRouteRouteWithChildren
  DashboardRouteRoute: typeof DashboardRouteRouteWithChildren
  SigninRoute: typeof SigninRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  protectedRouteRoute: protectedRouteRouteWithChildren,
  publicRouteRoute: publicRouteRouteWithChildren,
  DashboardRouteRoute: DashboardRouteRouteWithChildren,
  SigninRoute: SigninRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/(protected)",
        "/(public)",
        "/dashboard",
        "/signin"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/(protected)": {
      "filePath": "(protected)/route.tsx",
      "children": [
        "/(protected)/admin",
        "/(protected)/admin-socket/"
      ]
    },
    "/(public)": {
      "filePath": "(public)/route.tsx",
      "children": [
        "/(public)/about",
        "/(public)/diary",
        "/(public)/guardian-of-the-galaxy"
      ]
    },
    "/dashboard": {
      "filePath": "dashboard/route.tsx",
      "children": [
        "/dashboard/"
      ]
    },
    "/signin": {
      "filePath": "signin.tsx"
    },
    "/(protected)/admin": {
      "filePath": "(protected)/admin.tsx",
      "parent": "/(protected)"
    },
    "/(public)/about": {
      "filePath": "(public)/about.tsx",
      "parent": "/(public)"
    },
    "/(public)/diary": {
      "filePath": "(public)/diary.tsx",
      "parent": "/(public)",
      "children": [
        "/(public)/diary/$id/"
      ]
    },
    "/(public)/guardian-of-the-galaxy": {
      "filePath": "(public)/guardian-of-the-galaxy.tsx",
      "parent": "/(public)"
    },
    "/dashboard/": {
      "filePath": "dashboard/index.tsx",
      "parent": "/dashboard"
    },
    "/(protected)/admin-socket/": {
      "filePath": "(protected)/admin-socket.index.tsx",
      "parent": "/(protected)"
    },
    "/(public)/diary/$id/": {
      "filePath": "(public)/diary.$id.index.tsx",
      "parent": "/(public)/diary"
    }
  }
}
ROUTE_MANIFEST_END */
